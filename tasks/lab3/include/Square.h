#pragma once
#include "Figure.h"

/**
 * @file Square.h
 * @brief Класс для представления квадрата
 */

/**
 * @class Square
 * @brief Класс Квадрат - наследник Figure
 * 
 * КВАДРАТ - это четырехугольник с:
 * - 4 равными сторонами
 * - 4 прямыми углами (90°)
 * 
 * НАСЛЕДОВАНИЕ:
 * class Square : public Figure
 *        ^         ^       ^
 *        |         |       |
 *     имя класса  тип    базовый класс
 *                наслед.
 * 
 * PUBLIC наследование означает:
 * - public методы Figure остаются public в Square
 * - protected методы Figure остаются protected в Square
 * - Square "является" (is-a) Figure
 * - Можно использовать Square везде, где ожидается Figure*
 * 
 * ПОЛИМОРФИЗМ В ДЕЙСТВИИ:
 * @code
 * Figure* fig = new Square();   // Указатель на базовый класс
 * fig->area();                  // Вызовется Square::area(), а не Figure::area()
 * fig->center();                // Вызовется Square::center()
 * @endcode
 */
class Square : public Figure {
public:
    // ===================================================================
    // КОНСТРУКТОРЫ
    // ===================================================================
    
    /**
     * @brief Конструктор по умолчанию
     * 
     * Создает единичный квадрат 1x1 с вершинами:
     * (0,0), (1,0), (1,1), (0,1)
     * 
     * Площадь = 1, Центр = (0.5, 0.5)
     */
    Square();
    
    /**
     * @brief Конструктор с заданными вершинами
     * @param p Массив из 4 точек (в любом порядке)
     * 
     * Создает квадрат с заданными вершинами.
     * Точки автоматически упорядочиваются методом setPoints().
     */
    Square(const Point p[4]);
    
    // ===================================================================
    // ПРАВИЛО ПЯТИ
    // ===================================================================
    
    /**
     * @brief Деструктор
     * 
     * override означает: переопределяем виртуальный метод базового класса.
     * Компилятор проверит, что такой метод действительно есть в Figure.
     * 
     * = default означает: используем стандартную реализацию.
     * Здесь нет динамической памяти, поэтому просто удаляем объект.
     */
    ~Square() override = default;
    
    /**
     * @brief Конструктор копирования
     * @param other Квадрат для копирования
     * 
     * Создает независимую копию квадрата.
     * Копируются все 4 вершины поэлементно.
     */
    Square(const Square& other);
    
    /**
     * @brief Оператор присваивания копированием
     * @param other Квадрат для копирования
     * @return Ссылка на текущий объект
     * 
     * ВАЖНО: содержит защиту от самоприсваивания (sq = sq).
     */
    Square& operator=(const Square& other);
    
    /**
     * @brief Конструктор перемещения
     * @param other Квадрат для перемещения
     * 
     * "Крадет" данные у временного объекта.
     * Для Point (простой тип) перемещение = копирование,
     * но мы реализуем для демонстрации правила пяти.
     */
    Square(Square&& other) noexcept;
    
    /**
     * @brief Оператор присваивания перемещением
     * @param other Квадрат для перемещения
     * @return Ссылка на текущий объект
     */
    Square& operator=(Square&& other) noexcept;
    
    // ===================================================================
    // РЕАЛИЗАЦИЯ ВИРТУАЛЬНЫХ МЕТОДОВ
    // ===================================================================
    
    /**
     * @brief Вычисляет центр квадрата
     * @return Точка - центр квадрата
     * 
     * Для квадрата центр = среднее арифметическое всех вершин.
     */
    Point center() const override;
    
    /**
     * @brief Вычисляет площадь квадрата
     * @return Площадь в квадратных единицах
     * 
     * Использует формулу Гаусса (Shoelace):
     * S = 1/2 * |sum(xi * yi+1 - xi+1 * yi)|
     */
    double area() const override;
    
    /**
     * @brief Выводит информацию о квадрате
     * @param os Выходной поток
     * 
     * Формат: "Square: (x1,y1) (x2,y2) (x3,y3) (x4,y4)"
     */
    void print(std::ostream& os) const override;
    
    /**
     * @brief Читает координаты квадрата из потока
     * @param is Входной поток
     * 
     * Считывает 8 чисел (4 точки по 2 координаты).
     * Автоматически упорядочивает точки.
     */
    void read(std::istream& is) override;
    
    /**
     * @brief Возвращает тип фигуры
     * @return "Square"
     */
    const char* getType() const override { return "Square"; }
};